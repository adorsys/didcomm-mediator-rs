name: Rust CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always

jobs:
  # Continuous Integration Job
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          ${{ runner.os }}-cargo

    - name: Set up Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        rustflags:

    - name: Install Nextest test runner
      run: cargo install cargo-nextest

    - name: Create example env file
      run: |
        chmod +x .github/scripts/test_config.sh
        sh .github/scripts/test_config.sh
    - name: Run Clippy (Lint)
      run: cargo clippy --workspace --all-targets --all-features -- -D warnings

    - name: Check Formatting
      run: cargo fmt --all -- --check

    - name: Build Project
      run: cargo build --workspace --all-features

    - name: Run Tests
      run: cargo nextest run --workspace --all-features

  # Continuous Deployment Job
  cd:
    name: Continuous Deployment
    needs: ci 
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable

    - name: Build Release
      run: cargo build --release --workspace --all-features

    - name: Deploy to Production
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        HOST: ${{ secrets.PRODUCTION_HOST }}
        USER: ${{ secrets.PRODUCTION_USER }}
      run: |
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ssh_key
        chmod 600 ssh_key
        scp -i ssh_key target/release/your_binary ${{ env.USER }}@${{ env.HOST }}:/path/to/your/binary
        ssh -i ssh_key ${{ env.USER }}@${{ env.HOST }} 'systemctl restart your-service'
        rm -f ssh_key
