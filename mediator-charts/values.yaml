replicaCount: 1
externalDnsHostname: didcomm-mediator.eudi-adorsys.com

mongodb:
  enabled: true
  architecture: standalone
  image:
    registry: docker.io
    repository: bitnami/mongodb
    tag: 8.0.4-debian-12-r3
    pullPolicy: IfNotPresent
    debug: true

  auth: 
    enabled: true
    usernames: 
      - root
    databases: 
      - MediatorDB
    existingSecret: mediator-eks-secret

  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      additionalLabels:
        release: mediator-kube-prometheus
    prometheusRule:
      enabled: true
      
  service: 
    nameOverride: "mongodb-service"
    type: ClusterIP
    portName: mongodb
    ports:
      mongodb: 27017
    
  persistence:
    enabled: true
    storageClass: "high-performance"
    accessModes: 
      - ReadWriteOnce
    size: 10Gi
    mountPath: /bitnami/mongodb 

prometheus:
  enabled: true
  scrapeInterval: 5s
  evaluationInterval: 10s
  externalUrl: "https://didcomm-mediator.eudi-adorsys.com/prometheus"
  routePrefix: "/prometheus"
  ruleSelector:
    matchLabels:
      app: mediator
  scrapeInterval: 15s
  evaluationInterval: 15s
  alertingEndpoints: ["mediator-kube-prometheus-alertmanager.didcomm-mediator.svc.cluster.local:9093"]
  additionalScrapeConfigs:
    enabled: true
    type: internal
    internal:
      jobList:
        - job_name: 'mediator-service'
          metrics_path: /metrics
          static_configs:
            - targets: ['mediator-service.didcomm-mediator.svc.cluster.local:8080']

  image:
    registry: docker.io
    repository: bitnami/prometheus
    tag: 2.55.1-debian-12-r14
    pullPolicy: IfNotPresent

  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false

  networkPolicy:
    enabled: true

  service: 
    nameOverride: "mediator-kube-prometheus-prometheus"
    type: ClusterIP
    portName: prometheus
    ports:
      http: 9090

  serviceMonitor:
    enabled: true
    path: /metrics
    jobLabel: "mediator"
    interval: "15s"
    labels:
      prometheus: "monitoring"
    annotations:
      prometheus.io/scrape: "true"
    extraParameters:
      tlsConfig:
        insecureSkipVerify: true
    sampleLimit: 5000


alertmanager:
  enabled: true
  externalConfig: true
  image:
    registry: docker.io
    repository: bitnami/alertmanager
    tag: 0.28.1-debian-12-r0
  service:
    type: ClusterIP
    ports:
      http: 9093
  networkPolicy:
    enabled: true
  secrets: ["alertmanager-mediator-mediator-charts-alertmanager"]
  configSecret: ["alertmanager-mediator-mediator-charts-alertmanager"]
  # config:
  #   global:
  #     resolve_timeout: 5m
  #   route:
  #     receiver: discord
  #     group_by: ['alertname']
  #     group_wait: 30s
  #     group_interval: 5m
  #     repeat_interval: 4h
  #   receivers:
  #     - name: discord
  #       webhook_configs:
  #         - url: 'https://discordapp.com/api/webhooks/1339519604564824136/p4F_iBFo7FDK12pqwjTdnX15KBjHOazAyx_wVrPeVuT7Aa-rkwp7rXl0OMuAtOe-lmCe'
  #           send_resolved: true
  # templateFiles:
  #   discord.tmpl: |-
  #     {{ define "discord.default.message" }}
  #     {
  #       "content": "{{ range .Alerts }}{{ .Annotations.summary }}\n{{ .Annotations.description }}{{ end }}"
  #     }
  #     {{ end }}

exporters:
  node-exporter:
    enabled: true
  kube-state-metrics:
    enabled: true

node-exporter:
  service:
    labels:
      jobLabel: node-exporter
  serviceMonitor:
    enabled: true

kube-state-metrics:
  serviceMonitor:
    enabled: true
    honorLabels: true

grafana:
  enabled: true
  image:
    registry: docker.io
    repository: bitnami/grafana
    tag: 11.5.1-debian-12-r1

  admin:
    user: root
    existingSecret: mediator-eks-secret
    existingSecretPasswordKey: grafana-password

  service: 
    nameOverride: "mediator-grafana"
    type: ClusterIP
    portName: grafana
    ports:
      grafana: 3000

  persistence:
    enabled: true
    storageClass: "high-performance"
    accessModes: 
      - ReadWriteOnce
    size: 10Gi
    mountPath: /bitnami/grafana 

  config:
    useGrafanaIniFile: true
    grafanaIniConfigMap: "grafana-configmap"
    
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /opt/bitnami/grafana/dashboards/didcomm-mediator.json

  dashboardsConfigMaps:
    - configMapName: dashboard-configmap
      fileName: didcomm-mediator.json
      namespace: didcomm-mediator
      labels:
        grafana_dashboard: "1"

  volumes:
    - name: grafana-config
      configMap:
        name: grafana-configmap
    - name: grafana-dashboards
      configMap:
        name: dashboard-configmap

  volumeMounts:
    - name: grafana-dashboards
      mountPath: /opt/bitnami/grafana/dashboards
    - name: grafana-config
      mountPath: /opt/bitnami/grafana/conf/grafana.ini
      subPath: grafana.ini

mediator:
  image:
    repository: ghcr.io/adorsys/didcomm-mediator-rs
    pullPolicy: Always
    tag: latest
  ingress:
    tls:
      hosts:
        - "*.eudi-adorsys.com"
    secretName: mediator-tls
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
  service:
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/path: "/metrics"
      prometheus.io/port: "8080"
    labels: 
      app: mediator

  configmap:
    name: mediator-configmap

externalSecret:
  metadata:
    name: mediator-external-secret
  spec: 
    secretKey1: mongodb-passwords
    secretKey2: mongodb-root-password
    secretKey3: grafana-password
    secretKey4: discord-webhook-secret
    refreshInterval: 1h
    secretStoreRef:
      name: mediator-secret-store
    target:
      name: mediator-eks-secret
      creationPolicy: Owner
  awssecretKey1: MONGO_PASSWORD
  awssecretKey2: MONGO_ROOT_PASSWORD
  awssecretKey3: GF_SECURITY_ADMIN_PASSWORD
  awssecretKey4: DISCORD_WEBHOOK_SECRET

awsSecretName: mediator-secrets
