replicaCount: 1
externalDnsHostname: didcomm-mediator.eudi-adorsys.com

mongodb:
  enabled: true
  architecture: standalone
  image:
    registry: docker.io
    repository: bitnami/mongodb
    tag: 8.0.4-debian-12-r3
    pullPolicy: IfNotPresent
    debug: true

  auth: 
    enabled: true
    usernames: 
      - root
    databases: 
      - MediatorDB
    existingSecret: mediator-eks-secret

  service: 
    nameOverride: "mongodb-service"
    type: ClusterIP
    portName: mongodb
    ports:
      mongodb: 27017
    
  persistence:
    enabled: true
    storageClass: "high-performance"
    accessModes: 
      - ReadWriteOnce
    size: 10Gi
    mountPath: /bitnami/mongodb 

prometheus:
  enabled: true
  image:
    registry: docker.io
    repository: bitnami/prometheus-operator
    tag: 0.80.0-debian-12-r1
    pullPolicy: IfNotPresent

  networkPolicy:
    enabled: true
    
  service: 
    nameOverride: "prometheus-service"
    type: ClusterIP
    portName: prometheus
    ports:
      prometheus: 9090

  prometheusSpec:
    scrapeInterval: 5s
    evaluationInterval: 10s
    additionalScrapeConfigs:
      - job_name: 'didcomm-mediator'
        static_configs:
          - targets: ['didcomm-mediator.eudi-adorsys.com:8080']  
            labels:
              environment: "production"
              service: "didcomm-mediator"
      - job_name: 'node'
        static_configs:
          - targets: ['node_exporter:9100']
      - job_name: 'mongodb'
        static_configs:
          - targets: ['mongodb-exporter:9216']  
            labels:
              environment: "production"
              service: "mongodb"

alertmanager:
  enabled: true
  image:
    repository: bitnami/alertmanager
    tag: 0.28.0-debian-12-r5
    pullPolicy: IfNotPresent

  service: 
    nameOverride: "alertmanager-service"
    type: ClusterIP
    portName: alertmanager
    ports:
      alertmanager: 9093

  config:
    global:
      resolve_timeout: 5m
    route:
      group_by: ['alertname']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 4h
      receiver: 'discord_webhook'
    receivers:
      - name: 'discord_webhook'
        webhook_configs:
          - url: 'https://discord.com/api/webhooks/1339519604564824136/p4F_iBFo7FDK12pqwjTdnX15KBjHOazAyx_wVrPeVuT7Aa-rkwp7rXl0OMuAtOe-lmCe'
            send_resolved: true

grafana:
  enabled: true
  image:
    registry: docker.io
    repository: bitnami/grafana
    tag: 11.5.1-debian-12-r1

  admin:
    existingSecret: grafana-secret
    user: GRAFANA_ADMIN_PASSWORD
    password: GRAFANA_ADMIN_PASSWORD

  service: 
    nameOverride: "grafana-service"
    type: ClusterIP
    portName: grafana
    ports:
      grafana: 3000

  grafana.ini:
    server:
      root_url: "%(protocol)s://%(domain)s/"
      serve_from_sub_path: true

  dashboardProviders:
    enabled: true
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: 'default'
          orgId: 1
          folder: ''
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards
    configMapName: dashboard-configmap
  

  # dashboardsConfigMaps:
  #   - configMapName: dashboard-configmap
  #     labels:
  #       grafana_dashboard: "1"
  #     data:
  #       didcomm-mediator.json: |
  #         {
  #           "dashboard": {
  #             "panels": [
  #               {
  #                 "title": "API Response Time",
  #                 "type": "graph",
  #                 "targets": [
  #                   {
  #                     "expr": "histogram_quantile(0.95, rate(api_response_time_seconds_bucket[5m]))",
  #                     "legendFormat": "95th percentile"
  #                   }
  #                 ]
  #               },
  #               {
  #                 "title": "CPU Usage",
  #                 "type": "graph",
  #                 "targets": [
  #                   {
  #                     "expr": "100 - (avg by (instance) (rate(node_cpu_seconds_total{mode='idle'}[2m])) * 100",
  #                     "legendFormat": "CPU Usage"
  #                   }
  #                 ]
  #               },
  #               {
  #                 "title": "Memory Usage",
  #                 "type": "graph",
  #                 "targets": [
  #                   {
  #                     "expr": "(1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100",
  #                     "legendFormat": "Memory Usage"
  #                   }
  #                 ]
  #               },
  #               {
  #                 "title": "MongoDB Connections",
  #                 "type": "graph",
  #                 "targets": [
  #                   {
  #                     "expr": "mongodb_connections{state='current'}",
  #                     "legendFormat": "Connections"
  #                   }
  #                 ]
  #               }
  #             ]
  #           }
  #         }

  volumes:
    - name: grafana-dashboards
      configMap:
        name: dashboard-configmap

  volumeMounts:
    - name: grafana-dashboards
      mountPath: /var/lib/grafana/dashboards
      
nodeExporter:
  enabled: true
  image:
    registry: docker.io
    repository: bitnami/node-exporter
    tag: 1.3.1-debian-12-r12
    
  service: 
    nameOverride: "nodeExporter-service"
    type: ClusterIP
    portName: nodeExporter
    ports:
      nodeExporter: 9100

kube-state-metrics:
  enabled: true

prometheus-node-exporter:
  enabled: true

prometheusRule:
  rules:
    - alert: InstanceDown
      expr: up{job="didcomm-mediator"} == 0
      for: 10s
      labels:
        severity: critical
      annotations:
        summary: "Instance {{ $labels.instance }} is down"
        description: "The instance {{ $labels.instance }} is not responding."

    - alert: HighCPUUsage
      expr: (100 - (avg by (instance) (rate(node_cpu_seconds_total{mode="idle"}[2m])) * 100)) > 80
      for: 30s
      labels:
        severity: warning
      annotations:
        summary: "High CPU Usage on {{ $labels.instance }}"
        description: "CPU usage is above 80% for the last 2 minutes."

    - alert: HighMemoryUsage
      expr: (1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100 > 85
      for: 1m
      labels:
        severity: warning
      annotations:
        summary: "High Memory Usage on {{ $labels.instance }}"
        description: "Memory usage is above 85% for the last 2 minutes."

    - alert: SlowAPIResponse
      expr: histogram_quantile(0.95, rate(api_response_time_seconds_bucket[5m])) > 1
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "Slow API responses on {{ $labels.instance }}"
        description: "95th percentile of API response times is above 1 second for more than 5 minutes."

    - alert: MongoDBInstanceDown
      expr: up{job="mongodb"} == 0
      for: 10s
      labels:
        severity: critical
      annotations:
        summary: "MongoDB instance is down"
        description: "The MongoDB instance {{ $labels.instance }} is not responding."

    - alert: HighMongoDBConnections
      expr: mongodb_connections{state="current"} > 100
      for: 30s
      labels:
        severity: warning
      annotations:
        summary: "High number of MongoDB connections"
        description: "MongoDB has more than 100 active connections."

mediator:
  image:
    repository: ghcr.io/adorsys/didcomm-mediator-rs
    pullPolicy: Always
    tag: latest
  ingress:
    tls:
      hosts:
        - "*.eudi-adorsys.com"
    secretName: mediator-tls
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod

  configmap:
    name: mediator-configmap

externalSecret:
  metadata:
    name: mediator-external-secret
  spec: 
    secretKey1: mongodb-passwords
    secretKey2: mongodb-root-password
    refreshInterval: 1h
    secretStoreRef:
      name: mediator-secret-store
    target:
      name: mediator-eks-secret
      creationPolicy: Owner
  awssecretKey1: MONGO_PASSWORD
  awssecretKey2: MONGO_ROOT_PASSWORD

awsSecretName: mediator-secrets